{"total":11,"pageSize":5,"pageCount":3,"data":[{"title":"省VR技能大赛项目(2)-关于射线简称和LayerMask问题","slug":"省VR技能大赛项目-2-关于射线简称和LayerMask问题","date":"2020-06-29T03:06:32.000Z","updated":"2020-07-03T02:25:04.354Z","comments":true,"path":"api/articles/省VR技能大赛项目-2-关于射线简称和LayerMask问题.json","excerpt":"<p>因为省赛所有的镜头交互基本都需要用到中心点和进度条的方式，所以射线检测是不可或缺的环节。</p>\n<p>射线检测较为基础，但是在不同情况和要求下射线检测的用法也会有所变化，比如同时检测多个物体、只能检测一次等等。所以牢记射线检测的方法以及拓展用法极为重要。</p>","keywords":null,"cover":"/2020/06/29/%E7%9C%81VR%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E9%A1%B9%E7%9B%AE-2-%E5%85%B3%E4%BA%8E%E5%B0%84%E7%BA%BF%E7%AE%80%E7%A7%B0%E5%92%8CLayerMask%E9%97%AE%E9%A2%98/1.png","content":null,"text":"因为省赛所有的镜头交互基本都需要用到中心点和进度条的方式，所以射线检测是不可或缺的环节。射线检测较为基础，但是在不同情况和要求下射线检测的用法也会有所变化，比如同时检测多个物体、只能检测一次等等。所以牢记射线检测的方法以及拓展用法极为重要。一、射线检测的基本用法射线检测有几个必要","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D - C#","slug":"Unity3D-C","count":1,"path":"api/tags/Unity3D-C.json"}]},{"title":"C#实现Unity3D中的Text组件打字机效果","slug":"C-实现Unity3D中的Text组件打字机效果","date":"2020-06-29T01:25:13.000Z","updated":"2020-06-29T02:28:58.181Z","comments":true,"path":"api/articles/C-实现Unity3D中的Text组件打字机效果.json","excerpt":"<p>实现Text组件一个字一个字显示的打字机效果是非常常见且经常容易遇见的题目，这个效果的实现方法多种多样，记录一下我个人常用的一个相对简单的方法。</p>\n<p>大体的思路，主要是以下几点：</p>\n<ol>\n<li>获取物体的Text组件</li>\n<li>保存Text组件内的文字</li>\n<li>通过保存的文字用Substring方法实时刷新Text组件内的文字来实现打字机效果</li>\n</ol>","keywords":null,"cover":null,"content":null,"text":"实现Text组件一个字一个字显示的打字机效果是非常常见且经常容易遇见的题目，这个效果的实现方法多种多样，记录一下我个人常用的一个相对简单的方法。大体的思路，主要是以下几点：获取物体的Text组件保存Text组件内的文字通过保存的文字用Substring方法实时刷新Text组件内的","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":6,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":4,"path":"api/tags/C.json"}]},{"title":"省VR技能大赛项目(1)-关于Transform组件的值获取问题","slug":"省VR技能大赛项目-1-关于Transform组件的值获取问题","date":"2020-06-28T04:52:49.000Z","updated":"2020-06-29T02:19:13.215Z","comments":true,"path":"api/articles/省VR技能大赛项目-1-关于Transform组件的值获取问题.json","excerpt":"<p>这几天在做VR省赛的项目时，遇到这么一个需求：</p>","keywords":null,"cover":"/2020/06/28/%E7%9C%81VR%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E9%A1%B9%E7%9B%AE-1-%E5%85%B3%E4%BA%8ETransform%E7%BB%84%E4%BB%B6%E7%9A%84%E5%80%BC%E8%8E%B7%E5%8F%96%E9%97%AE%E9%A2%98/1.png","content":null,"text":"这几天在做VR省赛的项目时，遇到这么一个需求： [Figure] 正是因为看到了这个赋值的问题，我才发现我上面所述的压根儿就没有赋值给transform的问题。不过倒是也又巩固了一下我对于结构体和值传递的记忆。版权所有，转载请注明地址本文为「&copy;柑茶」原创文章，遵循 CC","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":6,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":4,"path":"api/tags/C.json"}]},{"title":"Unity3D近期知识点整理(1)","slug":"Unity3D近期知识点整理-1","date":"2020-06-27T03:40:13.000Z","updated":"2020-06-28T04:43:21.257Z","comments":true,"path":"api/articles/Unity3D近期知识点整理-1.json","excerpt":"<h3 id=\"1-关于Awake-方法\"><a href=\"#1-关于Awake-方法\" class=\"headerlink\" title=\"1.关于Awake()方法\"></a>1.关于Awake()方法</h3><p>Awake()在组件或脚本中，于程序开始初始化被载入时调用，而Start()在GameObject第一次被渲染时被调用，所以Awake()先于Start()被调用。</p>\n<p>Awake()也不仅仅只是在程序初始化的时候才调用，无论程序运行的任何时刻，只要有组件或者脚本被实例化载入了，他的Awake()就会被调用。(例如动态生成:键盘响应载入脚本等等)</p>\n<h3 id=\"2-父类与子类的关系\"><a href=\"#2-父类与子类的关系\" class=\"headerlink\" title=\"2.父类与子类的关系\"></a>2.父类与子类的关系</h3><p>子类本质上就是一个父类，因为它要实现父类包含的所有的方法。因此父类所有的特点子类都继承了。(比如动物是父类，鸡是子类，鸡也是动物，所以子类就是父类。)</p>\n<h3 id=\"3-关于修饰符在组件里的可见性\"><a href=\"#3-关于修饰符在组件里的可见性\" class=\"headerlink\" title=\"3.关于修饰符在组件里的可见性\"></a>3.关于修饰符在组件里的可见性</h3><p>public修饰的变量可以显示在组件中(Inspector)，但是剩下的private、protected、internal就无法显示了。</p>","keywords":null,"cover":null,"content":null,"text":"1.关于Awake()方法Awake()在组件或脚本中，于程序开始初始化被载入时调用，而Start()在GameObject第一次被渲染时被调用，所以Awake()先于Start()被调用。Awake()也不仅仅只是在程序初始化的时候才调用，无论程序运行的任何时刻，只要有组件或者","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":6,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":4,"path":"api/tags/C.json"}]},{"title":"Unity和VS中的常用快捷键整理","slug":"Unity和VS中的常用快捷键整理","date":"2020-06-27T02:35:47.000Z","updated":"2020-06-27T03:26:30.829Z","comments":true,"path":"api/articles/Unity和VS中的常用快捷键整理.json","excerpt":"<h3 id=\"一-Visual-Studio常用快捷键\"><a href=\"#一-Visual-Studio常用快捷键\" class=\"headerlink\" title=\"一.Visual Studio常用快捷键\"></a>一.Visual Studio常用快捷键</h3><ul>\n<li><p>快速注释</p>\n<p><strong>Ctrl + K + C</strong></p>\n</li>\n<li><p>取消注释</p>\n<p><strong>Ctrl + K + U</strong></p>\n</li>\n<li><p>格式化代码</p>\n<p><strong>Ctrl + K + D</strong></p>\n</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"一.Visual Studio常用快捷键快速注释Ctrl + K + C取消注释Ctrl + K + U格式化代码Ctrl + K + D  F5 调试运行  F9 设置断点  F10 逐行执行  F11 一句一句执行 (如果一行中调用了其他方法，那么他会跟踪到那个方法中去。) ","link":"","raw":null,"photos":[],"categories":[{"name":"Unity3D","slug":"Unity3D","count":2,"path":"api/categories/Unity3D.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":6,"path":"api/tags/Unity3D.json"}]}]}