{"title":"Unity3D中C#脚本的基础语法","slug":"Unity3D中C-脚本的基础语法","date":"2020-03-20T11:13:53.000Z","updated":"2020-06-27T04:28:35.603Z","comments":true,"path":"api/articles/Unity3D中C-脚本的基础语法.json","photos":[],"link":"","excerpt":"一.位移与旋转位移使用Rotate方法1<br>2<br>3<br>4<br>5<br>6<br>public class BNUTransR : MonoBehaviour &#123;<br>    void Update()&#123;<br>        this.transform.Rotate(2,0,0);    /*绕x轴每帧旋转2°(x轴,y轴,z轴)<br>                                           在Rotate方法中数字为旋转度数而非速度*/ <br>    &#125;<br>&#125;<br>","covers":null,"content":"<h2 id=\"一-位移与旋转\"><a href=\"#一-位移与旋转\" class=\"headerlink\" title=\"一.位移与旋转\"></a>一.位移与旋转</h2><ol>\n<li><strong>位移</strong></li>\n</ol>\n<p>使用Rotate方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUTransR</span> : <span class=\"title\">MonoBehaviour</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transform.Rotate(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);    <span class=\"comment\">/*绕x轴每帧旋转2°(x轴,y轴,z轴)</span></span><br><span class=\"line\"><span class=\"comment\">                                           在Rotate方法中数字为旋转度数而非速度*/</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<ol start=\"2\">\n<li><strong>旋转</strong></li>\n</ol>\n<p>使用Translate方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUTransT</span> : <span class=\"title\">MonoBehaviour</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transform.Translate(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);    <span class=\"comment\">//每帧朝z轴方向移动1个单位长度</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于单位长度的设定在Edit菜单的Snap Settings中。</p>\n<p>普通物体和添加了刚体组件的物体都可以使用transform变换下的Translate函数进行移动的。不过添加刚体组件的物体具备物理属性，受力后会有移动旋转碰撞，都是通过物理引擎进行计算的，这时这类物体如果再同时使用变换方式进行移动，就会出错。</p>\n<h2 id=\"二-有关时间的方法\"><a href=\"#二-有关时间的方法\" class=\"headerlink\" title=\"二.有关时间的方法\"></a>二.有关时间的方法</h2><p>在Unity中需要记录时间的功能都需要用到Time类，其中最重要的变量就是deltaTime(为只读变量)，它代表了最近一次调用FixedUpdate或者Update方法到现在的时间。</p>\n<p>如果想要在不考虑帧率的情况下匀速的完成一个效果，就可以乘以Time.deltaTime。(也就是说帧率会产生影响)</p>\n<p>假如物体涉及到了刚体，那么就需要写在FixedUpdate方法中且乘以fixedDeltaTime。(因为Rigidbody涉及到了物理运算，所以要用物理的时间而非以帧率为标准)</p>\n<p>例：匀速移动物体的刚体</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUFUpdtae</span>: <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject gameObject;    <span class=\"comment\">//声明游戏对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Vector3 te = gameObject.GetComponent&lt;Rigidbody&gt;().transform.position;    <span class=\"comment\">//创建一个位置坐标te(向量)，把对象的刚体的位置赋予te(获取对象刚体的位置)</span></span><br><span class=\"line\">        te.y += <span class=\"number\">5</span> * Time.fixedDeltaTime;    <span class=\"comment\">//让te每秒上升5个单位</span></span><br><span class=\"line\">        gameObject.GetComponent&lt;Rigidbody&gt;().transform.position = te;    <span class=\"comment\">//再把te的位置附回给对象的刚体(使刚体移动)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-获取其他对象的方法\"><a href=\"#三-获取其他对象的方法\" class=\"headerlink\" title=\"三.获取其他对象的方法\"></a>三.获取其他对象的方法</h2><ol>\n<li><strong>获取带有层次关系的游戏对象</strong></li>\n</ol>\n<p>场景中的物体必定存在父子关系，如果想通过脚本来控制父物体或者子物体，就需要用到Transform组件。</p>\n<p>获取子物体：transform.Find(“子物体名称”)</p>\n<p>当获取到子物体后，还可以继续通过GetComponent方法来获取子物体的其他组件。</p>\n<p>获取父物体：transform.parent</p>\n<p>因为一个物体的父物体肯定只有一个，所以不需要根据特定名字来查找。</p>\n<p>例：通过查找使子物体和父物体旋转</p>\n<p>我们创建三个物体，Cube1、Cube2及Cube3，层级从小到大。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUParchild</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transform.Find(<span class=\"string\">\"Cube1\"</span>).Rotate(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);    <span class=\"comment\">//找到子对象Cube1，并将其沿x轴旋转</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transform.parent.Rotate(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);           <span class=\"comment\">//找到父对象，并将其沿x轴旋转</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只需将该脚本附挂在Cube2上，即可让父子物体旋转了。</p>\n<ol start=\"2\">\n<li><strong>通过名字或标签获取游戏对象</strong></li>\n</ol>\n<p>GameObject.Find  通过名字获取对象</p>\n<p>GameObject.FindWithTag  通过标签获取对象</p>\n<p>例：通过查找名字和标签获取对象并使他们旋转</p>\n<p>创建两个物体，Cube和Capsule，并给Capsule添加一个Cap标签。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUFind</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        GameObject obj1 = GameObject.Find(<span class=\"string\">\"Cube\"</span>);    <span class=\"comment\">//获取Cube</span></span><br><span class=\"line\">        obj1.transform.Rotate(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);\t</span><br><span class=\"line\">        GameObject obj2 = GameObject.FindWithTag(<span class=\"string\">\"Cap\"</span>);    <span class=\"comment\">//获取Capsule</span></span><br><span class=\"line\">        obj2.transform.Rotate(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><strong>通过组件名来获取游戏对象</strong></p>\n<p><strong>FindObjectOfType&lt;组件名称&gt;()</strong>和<strong>FindObject<font color=\"#ed1941\">s</font>OfType&lt;组件名称&gt;()</strong>方法是专门用来查找包含所指定组件的对象的。第一种只能获取到查找到的第一个对象，而第二个可以获取所有包含该组件的对象。</p>\n<p>例：打印带有同一个Test脚本组件的对象名称</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUFindtype</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Test test = FindObjectOfType&lt;Test&gt;();\t\t        <span class=\"comment\">//获取第一个找到的“Test”组件</span></span><br><span class=\"line\">        Debug.Log(test.gameObject.name);\t\t<span class=\"comment\">//打印挂载“Test”组件的第一个游戏对象的名称</span></span><br><span class=\"line\">        Test[] tests = FindObjectsOfType&lt;Test&gt;();\t\t<span class=\"comment\">//获取所有的“Test”组件</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Test te <span class=\"keyword\">in</span> tests)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(te.gameObject.name);\t\t<span class=\"comment\">//打印挂载“Test”组件所有的游戏对象的名称</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<hr>\n<h3 id=\"版权所有，转载请注明地址\"><a href=\"#版权所有，转载请注明地址\" class=\"headerlink\" title=\"版权所有，转载请注明地址\"></a>版权所有，转载请注明地址</h3><p>本文为「&copy;柑茶」原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>\n","categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":6,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":4,"path":"api/tags/C.json"}]}