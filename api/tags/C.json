{"name":"C#","slug":"C","count":2,"postlist":[{"title":"Unity3D中C#脚本的基础语法","slug":"Unity3D中C-脚本的基础语法","date":"2020-03-20T11:13:53.000Z","updated":"2020-06-27T04:28:35.603Z","comments":true,"path":"api/articles/Unity3D中C-脚本的基础语法.json","excerpt":"<h2 id=\"一-位移与旋转\"><a href=\"#一-位移与旋转\" class=\"headerlink\" title=\"一.位移与旋转\"></a>一.位移与旋转</h2><ol>\n<li><strong>位移</strong></li>\n</ol>\n<p>使用Rotate方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BNUTransR</span> : <span class=\"title\">MonoBehaviour</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transform.Rotate(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);    <span class=\"comment\">/*绕x轴每帧旋转2°(x轴,y轴,z轴)</span></span><br><span class=\"line\"><span class=\"comment\">                                           在Rotate方法中数字为旋转度数而非速度*/</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"一.位移与旋转位移使用Rotate方法1<br>2<br>3<br>4<br>5<br>6<br>public class BNUTransR : MonoBehaviour &#123;<br>    void Update()&#123;<br>        this.tr","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":4,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":2,"path":"api/tags/C.json"}]},{"title":"Unity3D近期知识点整理(1)","slug":"Unity3D近期知识点整理-1","date":"2020-06-27T03:40:13.000Z","updated":"2020-06-27T08:58:48.495Z","comments":true,"path":"api/articles/Unity3D近期知识点整理-1.json","excerpt":"<h3 id=\"1-关于Awake-方法\"><a href=\"#1-关于Awake-方法\" class=\"headerlink\" title=\"1.关于Awake()方法\"></a>1.关于Awake()方法</h3><p>Awake()在组件或脚本中，于程序开始初始化被载入时调用，而Start()在GameObject第一次被渲染时被调用，所以Awake()先于Start()被调用。</p>\n<p>Awake()也不仅仅只是在程序初始化的时候才调用，无论程序运行的任何时刻，只要有组件或者脚本被实例化载入了，他的Awake()就会被调用。(例如动态生成:键盘响应载入脚本等等)</p>\n<h3 id=\"2-父类与子类的关系\"><a href=\"#2-父类与子类的关系\" class=\"headerlink\" title=\"2.父类与子类的关系\"></a>2.父类与子类的关系</h3><p>子类本质上就是一个父类，因为它要实现父类包含的所有的方法。因此父类所有的特点子类都继承了。(比如动物是父类，鸡是子类，鸡也是动物，所以子类就是父类。)</p>\n<h3 id=\"3-关于修饰符在组件里的可见性\"><a href=\"#3-关于修饰符在组件里的可见性\" class=\"headerlink\" title=\"3.关于修饰符在组件里的可见性\"></a>3.关于修饰符在组件里的可见性</h3><p>public修饰的变量可以显示在组件中(Inspector)，但是剩下的private、protected、internal就无法显示了。</p>","keywords":null,"cover":null,"content":null,"text":"1.关于Awake()方法Awake()在组件或脚本中，于程序开始初始化被载入时调用，而Start()在GameObject第一次被渲染时被调用，所以Awake()先于Start()被调用。Awake()也不仅仅只是在程序初始化的时候才调用，无论程序运行的任何时刻，只要有组件或者","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D","slug":"Unity3D","count":4,"path":"api/tags/Unity3D.json"},{"name":"C#","slug":"C","count":2,"path":"api/tags/C.json"}]}]}