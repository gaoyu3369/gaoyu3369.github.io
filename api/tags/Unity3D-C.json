{"name":"Unity3D - C#","slug":"Unity3D-C","count":1,"postlist":[{"title":"省VR技能大赛项目(2)-关于射线简称和LayerMask问题","slug":"省VR技能大赛项目-2-关于射线简称和LayerMask问题","date":"2020-06-29T03:06:32.000Z","updated":"2020-07-03T02:19:54.044Z","comments":true,"path":"api/articles/省VR技能大赛项目-2-关于射线简称和LayerMask问题.json","excerpt":"","keywords":null,"cover":"/2020/06/29/%E7%9C%81VR%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E9%A1%B9%E7%9B%AE-2-%E5%85%B3%E4%BA%8E%E5%B0%84%E7%BA%BF%E7%AE%80%E7%A7%B0%E5%92%8CLayerMask%E9%97%AE%E9%A2%98/1.png","content":"<p>因为省赛所有的镜头交互基本都需要用到中心点和进度条的方式，所以射线检测是不可或缺的环节。</p>\n<p>射线检测较为基础，但是在不同情况和要求下射线检测的用法也会有所变化，比如同时检测多个物体、只能检测一次等等。所以牢记射线检测的方法以及拓展用法极为重要。</p>\n<h3 id=\"一、射线检测的基本用法\"><a href=\"#一、射线检测的基本用法\" class=\"headerlink\" title=\"一、射线检测的基本用法\"></a>一、射线检测的基本用法</h3><p>射线检测有几个必要的元素：</p>\n<p>1.<strong>Ray</strong>    射线</p>\n<p>Ray(Vector3 origin, Vector3 direction)</p>\n<p>就是以某个位置(origin)朝某个方向(direction)的一条射线，是一个三维坐标。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ray ray = <span class=\"keyword\">new</span> Ray(transform.position, transform.forward);</span><br></pre></td></tr></table></figure>\n\n<p>生成射线的方法多种多样，目前经常用到的主要是从鼠标点击位置发出、从屏幕中间发出等等。它们的共同点都是需要获取到屏幕信息，然后通过摄像机将射线打入游戏场景，以这两种情况举例：</p>\n<p>屏幕中心：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ray ray = Camera.main.ScreenPointToRay(<span class=\"keyword\">new</span> Vector3(Screen.width / <span class=\"number\">2</span>, Screen.height / <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">//通过Screen.width和Screen.height获取屏幕的宽高，然后通过取半值得到屏幕的中心点</span></span><br></pre></td></tr></table></figure>\n\n<p>鼠标位置：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class=\"line\"><span class=\"comment\">//这是实时获取鼠标的位置，如果要设置点击鼠标后才检测，只要给生成射线的语句加上Input.GetMouseButton()的条件即可</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.<strong>RaycastHit</strong>    光线投射碰撞</p>\n<p>用来获取从raycast函数中得到的信息反馈。</p>\n<p>因为RaycastHit用于存储射线碰撞到的第一个对象信息，在使用之前也是需要声明初始化创的，我个人的习惯是命名为hitResult，简写为hitRet。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RaycastHit hitRet;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.<strong>Raycast</strong>    射线检测</p>\n<p>Physics.Raycast(Ray ray, out RaycastHit hitRet, float maxDistance, LayerMask/int layermask);</p>\n<p>ray：射线结构体的信息，包括起点，方向，也就是一条射线。</p>\n<p>hitRet：这条射线所碰撞物体的相关信息。</p>\n<p>maxDistance：这条射线的最大距离。</p>\n<p>layermask：射线遮罩，控制这条射线在特定的层上进行碰撞检测。</p>\n<p><strong><em>Tip:</em></strong>有一点需要非常注意，当你需要使用到layermask的时候，前一个参数maxDistance是<strong>必须要实现的</strong>，要不然layerm将会被当做maxDistance，从而layermask将失去作用。</p>\n<p>4.<strong>LayerMask</strong>    层遮罩</p>\n<p>只选定指定的Layermask层内的碰撞器，其它层内碰撞器忽略检测。</p>\n<p>Unity中的layer层使用Int32的32个位来表示每个层级。</p>\n<p><img src=\"/2020/06/29/%E7%9C%81VR%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E9%A1%B9%E7%9B%AE-2-%E5%85%B3%E4%BA%8E%E5%B0%84%E7%BA%BF%E7%AE%80%E7%A7%B0%E5%92%8CLayerMask%E9%97%AE%E9%A2%98/1.png\" alt=\"1\"></p>\n<p>正是因为layermask用了Int32来表示不同的层级，所以可以直接用int来直接表示特定的层，也可以通过生成LayerMask类对象，再直接指定这个对象。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设自定义第9层为TargetObjects</span></span><br><span class=\"line\">LayerMask layerMask = <span class=\"number\">1</span> &lt;&lt; LayerMask.NameToLayer(<span class=\"string\">\"TargetObjects\"</span>);\t<span class=\"comment\">//TargetObjects层二进制进一位，即只检测该层</span></span><br><span class=\"line\">Physics.Raycast(ray, <span class=\"keyword\">out</span> hitRet, <span class=\"number\">100f</span>, layerMask);</span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\">Physics.Raycast(ray, <span class=\"keyword\">out</span> hitRet, <span class=\"number\">100f</span>, <span class=\"number\">9</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果想要实现指定的层<strong>不被检测</strong>，其它层都要被检测，可以直接取反：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LayerMask layerMask = ~(<span class=\"number\">1</span> &lt;&lt; LayerMask.NameToLayer(<span class=\"string\">\"TargetObjects\"</span>));\t<span class=\"comment\">//加上~按位取反</span></span><br><span class=\"line\">Physics.Raycast(ray, <span class=\"keyword\">out</span> hitRet, <span class=\"number\">100f</span>, layerMask);</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h3 id=\"版权所有，转载请注明地址\"><a href=\"#版权所有，转载请注明地址\" class=\"headerlink\" title=\"版权所有，转载请注明地址\"></a>版权所有，转载请注明地址</h3><p>本文为「&copy;柑茶」原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>\n","text":"因为省赛所有的镜头交互基本都需要用到中心点和进度条的方式，所以射线检测是不可或缺的环节。射线检测较为基础，但是在不同情况和要求下射线检测的用法也会有所变化，比如同时检测多个物体、只能检测一次等等。所以牢记射线检测的方法以及拓展用法极为重要。一、射线检测的基本用法射线检测有几个必要","link":"","raw":null,"photos":[],"categories":[{"name":"C#","slug":"C","count":5,"path":"api/categories/C.json"}],"tags":[{"name":"Unity3D - C#","slug":"Unity3D-C","count":1,"path":"api/tags/Unity3D-C.json"}]}]}